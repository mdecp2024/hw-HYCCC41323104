<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-HYCCC41323104">https://github.com/mdecp2024/hw-HYCCC41323104</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-HYCCC41323104/content/index.html">https://mdecp2024.github.io/hw-HYCCC41323104/content/index.html</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/oMnrBdpYeqk?si=EdYtAo6vrdaF-lqU" title="YouTube video player" width="560"></iframe></p>
<h3>w10</h3>
<p>題目一 :</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/OGHYpCz2U7Y?si=818Tsyt26Z2iRMoY" title="YouTube video player" width="560"></iframe></p>
<p>題目二 :</p>
<p>Q1:<span>請問 Python 程式中有關變數的命名, 除了必須以"_", 以及英文大小寫字母開頭之外, 還有甚麼需要特別注意的地方?</span></p>
<p>A1:</p>
<ul>
<li>變數名稱必須以字母或底線開頭，後面可以包含字母、數字和底線。</li>
<li>不能使用 Python 保留字和內建函數名稱。</li>
<li>請遵循 PEP 8 的命名風格，選擇具描述性的名稱，避免使用單字符變數。</li>
<li>注意區分大小寫，並避免使用容易混淆的名稱。   </li>
</ul>
<p>例子:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/GC4YQWdyzk0?si=l79BLNm8zWplQhfe" title="YouTube video player" width="560"></iframe></p>
<p>題目三 :</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/sKN2zqRHhNs?si=AqXzOS5hmNblKeRa" title="YouTube video player" width="560"></iframe></p>
<div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none">心得 : 這幾個禮拜學了程式語言之後，才了解了許多不同程式的用法，希望之後可以學會如何打程式。</div>
<h3>w11_hw</h3>
<p>第一題和第二題:</p>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/sh4-DwONF7c?si=GVbMWmTgzeSDHMl8" title="YouTube video player" width="560"></iframe></div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950"><a href="https://mdecp2024.github.io/hw-HYCCC41323104/content/Brython.html?src=https://gist.githubusercontent.com/HYCCC41323104/1222b46273f3e21167515a0a39660719/raw/e8bbaae680947890e098d106d6885c9cd5dfd31d/q1.py">程式碼一</a></div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950"><a href="https://mdecp2024.github.io/hw-HYCCC41323104/content/Brython.html?src=https://gist.githubusercontent.com/HYCCC41323104/1222b46273f3e21167515a0a39660719/raw/e8bbaae680947890e098d106d6885c9cd5dfd31d/q2.py">程式碼二</a></div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950"></div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950"><img alt="" height="163" src="/images/未命名.png" width="164"/></div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950"></div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">心得:
<div class="gs">
<div class="">
<div class="ii gt" id=":25" jslog="20277; u014N:xr6bB; 1:WyIjdGhyZWFkLWE6ci02MzY5OTE0OTQ1MTc5NjIzOTk4Il0.; 4:WyIjbXNnLWE6cjY0MzU4NTgyNjg3OTcwOTY2NDkiLG51bGwsbnVsbCxudWxsLDAsMCxbMSwwLDBdLDExLDIyNCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsMSxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCwwXQ..">
<div class="a3s aiL" id=":26">我覺得最難的是如何跟gpt 溝通得到我想要的程式，<wbr/>在課堂上的時候一直沒有得到我想要的程式，後來才從gpt 獲得我想要的程式，我先把它傳在email，<wbr/>然後在複製到個人網站的python ，確定是我希望的圖案和形狀之後，在把程式存在gist（<wbr/>記得要把檔案名加上.py），然後儲存好了之後點raw，<wbr/>會跑出一個網頁，把網頁網址複製，<wbr/>然後點到自己的個人網站的python ，在網址上加？src=以及剛剛複製的網址，<wbr/>能成功跑出程式和網址表示成功了！</div>
<div class="yj6qo"></div>
</div>
</div>
</div>
</div>
<h3>w12_hw</h3>
<p>影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/gFcRzogAnew?si=PuWqv-XC9ow4DbVM" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://gist.githubusercontent.com/HYCCC41323104/c6b638247077a64f02cdc973fa0a7078/raw/a32002ad62b64eecc89e5f46a1ef1f7eded03886/w12.py">程式碼</a></p>
<p><span>題目:請各組組員分別利用 </span><span>Brython 以及 Jupyter lab</span><span> 環境, 執行</span><a href="http://229.cycu.org/python_2025_lite.7z">可攜程式</a><span> notebook 目錄中的 </span><span>01_string_input_print.ipynb 至 10_for_search.ipynb</span><span> 筆記本程式, 完成後請將能在 Brython 執行的程式碼存入個人 </span><span>Gist</span><span> 後, 將各程式執行連結放入 w12_hw 網頁上. 最後請說明各範例中所使用的程式語法以及執行心得.</span></p>
<p><span>第一題: </span></p>
<p><span>01_string_input_print</span></p>
<p><a href="https://mdecp2024.github.io/hw-HYCCC41323104/content/Brython.html?src=https://gist.githubusercontent.com/HYCCC41323104/50db845fa40988fe1ea9be84a006d54e/raw/2a76ca399b12f8580e84a8e2421bbba82c66ac07/w12.1.py">what's  your name?</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 提示使用者輸入名字，並將輸入的名字儲存到變數中
name = input("What's your name?")

# 提示使用者輸入來自的地方，並將輸入的地點儲存到變數中
location = input("Where are you from?")</pre>
<p><strong>在程式中的input()意思 ?<img alt="surprised" src="/static/tinymce4/tinymce/plugins/emoticons/img/smiley-surprised.gif"/></strong><br/>在 Python 中，<code>input()</code> 是一個內建函數，用來從使用者那裡獲取輸入。它會顯示提示訊息，然後暫停程式的執行，直到使用者輸入一些內容並按下回車鍵。使用者輸入的內容會以字串（<code>string</code>）的形式返回。</p>
<p><a href="https://mdecp2024.github.io/hw-HYCCC41323104/content/Brython.html?src=https://gist.githubusercontent.com/HYCCC41323104/50db845fa40988fe1ea9be84a006d54e/raw/c857966ba7aed421093a79e27fba51e3a6ac485a/w12.1.2.py">貓 </a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 打印第一行：一隻貓的耳朵和臉部上半部
print (" /\_/\ ")
# 打印第二行：貓的眼睛和鼻子
print ("&gt;^.^&lt; ")
# 打印第三行：貓的嘴巴部分
print (" / \ ")
# 打印第四行：貓的身體部分，畫出四肢
print (" (___)___") #（尾巴的部分也可以理解為向右延伸）</pre>
<p><br/><img alt="" height="83" src="/images/cat.png" width="74"/></p>
<p><strong>在程式中的input()意思 ?<img alt="surprised" src="/static/tinymce4/tinymce/plugins/emoticons/img/smiley-surprised.gif"/></strong><br/>在python中，<code>print()</code>的主要作用是輸出資料到螢幕或其他輸出裝置。這通常用來顯示程式執行過程中的資訊、變數的值，或傳遞訊息給使用者，簡單說用於用於輸出文字、數值或變數的值。</p>
<p>第二題:</p>
<p>02_variables</p>
<p><a href="https://mdecp2024.github.io/hw-HYCCC41323104/content/Brython.html?src=https://gist.githubusercontent.com/HYCCC41323104/50db845fa40988fe1ea9be84a006d54e/raw/71bbf853bbfb843dfbb863c8f76b80d67b7b05ca/w12.2.1.py">填寫名字</a></p>
<pre class="brush:py;auto-links:false;toolbar:false;tab-size:7" contenteditable="false"># 將字串 "Mia" 賦值給變數 first_name
first_name = "Mia"

# 將字串 "Albert" 賦值給變數 last_name
last_name = "Albert"

# 輸出變數 first_name 的值（即 "Mia"）
print(first_name)

# 輸出變數 last_name 的值（即 "Albert"）
print(last_name)</pre>
<p><a href="https://mdecp2024.github.io/hw-HYCCC41323104/content/Brython.html?src=https://gist.githubusercontent.com/HYCCC41323104/50db845fa40988fe1ea9be84a006d54e/raw/71bbf853bbfb843dfbb863c8f76b80d67b7b05ca/hw12.2.2.py">你最愛吃甚麼?</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 使用者輸入名字，將結果儲存到變數 name
name = input("What's your name? ")

# 使用者輸入最喜歡的食物，將結果儲存到變數 favorite_food
favorite_food = input("What is your favorite food? ")

# 輸出問候語，包含名字
print("Hi! My name is " + name)

# 輸出使用者最喜歡的食物
print("My favorite food is " + favorite_food)

# 輸出結合名字和最喜歡食物的句子
print(name + "'s favorite food is " + favorite_food)</pre>
<p><span style="background-color: #339966; color: #ffffff;">網頁會跳出問題，問你的名字和最愛吃的食物，可以是中文~</span></p>
<p>第三題:</p>
<p>03_list_if_in_eise</p>
<p><a href="https://mdecp2024.github.io/hw-HYCCC41323104/content/Brython.html?src=https://gist.githubusercontent.com/HYCCC41323104/50db845fa40988fe1ea9be84a006d54e/raw/203ae5059b80438cdbe0f536d3e99a3e9d65b4b0/w12.3.py">身為書店老闆</a></p>
<p>你有三本書(書庫)分別為"<span class="hljs-string">Learn python"</span>, <span class="hljs-string">"Python for all"</span>, <span class="hljs-string">"Intro to python"，客人只能選購你擁有的這三本書，所以我們要先詢問要買什麼書，如果要買的書不在這三本(書庫)裡頭，那就會輸出抱歉<img alt="cry" src="/static/tinymce4/tinymce/plugins/emoticons/img/smiley-cry.gif"/>的訊息，要的書在這三本書(書庫)裡，就會輸出出Yes!<img alt="tongue-out" src="/static/tinymce4/tinymce/plugins/emoticons/img/smiley-tongue-out.gif"/></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義一個包含書名的清單 programming_books
programming_books = ["Learn python", "Python for all", "Intro to python"]

# 輸出整個書籍清單
print(programming_books)

# 提示使用者輸入他們想要購買的書名，將結果儲存到變數 wanted_book
wanted_book = input("Hi! What book would you like to buy? ")

# 輸出使用者輸入的書名
print(wanted_book)

# 使用 if 判斷書名是否在書籍清單中
if wanted_book in programming_books:
# 如果書名在清單中，輸出確認訊息
print("Yes, we sell it!")
else:
# 如果書名不在清單中，輸出抱歉訊息
print("Sorry, we don't sell that book")</pre>
<p><strong><code>if</code> 的作用</strong></p>
<ul>
<li>用來檢查條件是否成立（True）。</li>
<li>如果條件成立，執行對應的程式碼。</li>
<li>如果條件不成立，直接跳過。</li>
</ul>
<p><strong><code>else</code> 的作用</strong></p>
<ul>
<li>和 <code>if</code> 搭配使用。</li>
<li>當 <code>if</code> 條件不成立時，執行 <code>else</code> 裡的程式碼。</li>
</ul>
<p><br/><br/></p>
<p><span style="background-color: #ff6600; color: #ffffff;"></span></p>
<p><span style="background-color: #ff6600; color: #ffffff;"></span></p>
<h2>w13</h2>
<h3>w13_hw</h3>
<p><span>請在下列圖形中的兩個正方形外圍, 以黑色畫筆畫圓, 並設法在各線條所圍成的封閉區域塗上不同顏色. 操作過程請拍攝影片, 並在頁面中列出作業心得.</span></p>
<p><span><img alt="" height="121" src="/images/chrome_677uOcnTK5.png" width="118"/></span></p>
<p>解:<em></em></p>
<p><a href="https://mdecp2024.github.io/hw-HYCCC41323104/content/Brython.html?src=https://gist.githubusercontent.com/HYCCC41323104/f67524baaa449803385477cb3dd976f6/raw/d6f1318c573b1c38439ddde88f3a8470c9d4170c/w13.py">圖形的程式碼</a></p>
<p>心得:</p>
<p><span>這段程式充分利用了 Brython 的特性，將 Python 代碼嵌入到網頁中，實現了用 Python 繪製圖形的功能。，除此之外程式中繪製了多個圓形、三角形、矩形等基本圖形 ， 並且運用了多種顏色 ，讓圖形變得多彩繽紛，也提升了程式的視覺效果， 段程式讓我對 Brython 的使用和 Python 在瀏覽器中運行的潛力有了更深刻的了解。這不僅展示了如何用 Python 進行圖形繪製，還讓我學到了如何結合 HTML、CSS 和 JavaScript（在這裡是 Brython）來創建動態的視覺效果。 </span></p>
<p><span style="color: #ff0000;"><strong>訓練gpt給出我想要的程式花了最多的時間!!!!</strong></span></p>
<p>影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/RmFSV2dak7k?si=tL-G64bXIwkupCdy" title="YouTube video player" width="560"></iframe></p>
<pre class="brush:py;auto-links:false;toolbar:false;tab-size:9" contenteditable="false">from browser import html
from browser import document as doc
import math

# 創建一個500x500像素的畫布
canvas = html.CANVAS(width=500, height=500)

# 把畫布加入到頁面的div元素中
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 獲取畫布的繪圖上下文
ctx = canvas.getContext("2d")

# 設置畫筆寬度
ctx.lineWidth = 4

# 設置混色模式為"screem"，這會讓新畫的顏色與舊顏色進行混合
ctx.globalCompositeOperation = "screem"

# 設置描邊顏色為黑色
ctx.strokeStyle = 'black'

# 繪製第一個圓形，分為四個顏色
# 第一個圓段 (Turquoise 顏色)
ctx.beginPath()
ctx.arc(160, 160, 141, 0.25 * math.pi, 0.75 * math.pi)
ctx.fillStyle = "Turquoise"
ctx.fill()
ctx.stroke()

# 第二個圓段 (pink 顏色)
ctx.beginPath()
ctx.arc(160, 160, 141, 0.75 * math.pi, 1.25 * math.pi)
ctx.fillStyle = "pink"
ctx.fill()
ctx.stroke()

# 第三個圓段 (Lavender 顏色)
ctx.beginPath()
ctx.arc(160, 160, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = "Lavender"
ctx.fill()
ctx.stroke()

# 第四個圓段 (LightCoral 顏色)
ctx.beginPath()
ctx.arc(160, 160, 141, 1.75 * math.pi, 0.25 * math.pi)
ctx.fillStyle = "LightCoral "
ctx.fill()
ctx.stroke()

# 繪製第二個圓形，這個圓形也分為四個顏色
# 第一個圓段 (BurlyWood 顏色)
ctx.beginPath()
ctx.arc(260, 260, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = "BurlyWood "
ctx.fill()
ctx.stroke()

# 第二個圓段 (LightSkyBlue 顏色)
ctx.beginPath()
ctx.arc(260, 260, 141, 1.75 * math.pi, 0.25 * math.pi)
ctx.fillStyle = "LightSkyBlue "
ctx.fill()
ctx.stroke()

# 第三個圓段 (LavenderBlush 顏色)
ctx.beginPath()
ctx.arc(260, 260, 141, 0.25 * math.pi, 0.75 * math.pi)
ctx.fillStyle = "LavenderBlush"
ctx.fill()
ctx.stroke()

# 第四個圓段 (PeachPuff 顏色)
ctx.beginPath()
ctx.arc(260, 260, 141, 0.75 * math.pi, 1.25 * math.pi)
ctx.fillStyle = "PeachPuff "
ctx.fill()
ctx.stroke()

# 繪製紅色邊框的三角形，並用不同顏色填充
# 第一個三角形 (LightSalmon 顏色)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(60, 60) # 三角形的起點
ctx.lineTo(60, 260) # 連接到 (60, 260)
ctx.lineTo(260, 260) # 連接到 (260, 260)
ctx.fillStyle = "LightSalmon "
ctx.fill()
ctx.stroke()

# 第二個三角形 (Honeydew 顏色)
ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(260, 60) # 連接到 (260, 60)
ctx.lineTo(260, 260)
ctx.fillStyle = "Honeydew"
ctx.fill()
ctx.stroke()

# 第三個三角形 (LightBlue 顏色)
ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(360, 160) # 連接到 (360, 160)
ctx.lineTo(360, 360)
ctx.fillStyle = "LightBlue"
ctx.fill()
ctx.stroke()

# 第四個三角形 (PaleGoldenRod 顏色)
ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(160, 360) # 連接到 (160, 360)
ctx.lineTo(360, 360)
ctx.fillStyle = "PaleGoldenRod"
ctx.fill()
ctx.stroke()

# 繪製兩個重疊的小矩形
# 第一個小矩形 (PaleVioletRed 顏色)
ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(160, 260) # 連接到 (160, 260)
ctx.lineTo(260, 260)
ctx.fillStyle = "PaleVioletRed"
ctx.fill()
ctx.stroke()

# 第二個小矩形 (PaleGreen 顏色)
ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(260, 160) # 連接到 (260, 160)
ctx.lineTo(260, 260)
ctx.fillStyle = "PaleGreen"
ctx.fill()
ctx.stroke()

# 繪製藍色的斜線
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(60, 60) # 斜線起點 (60, 60)
ctx.lineTo(260, 260) # 斜線終點 (260, 260)
ctx.stroke()</pre>
<p style="top: 646.667px;"></p>
<p><span class="hljs-tag"></span></p>
<p></p>
<p></p>
<p></p>
<p>Brython Example</p>
<!-- 加載 Brython 庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload = function() {
            brython({debug: 1, pythonpath: ['/static/', './../downloads/py/']});  // 設定 Brython 並加載指定路徑
        }
</script>
<!-- 這個 div 用來顯示 Brython 的繪圖內容 -->
<div id="brython_div1"></div>
<!-- 在此處放置 Python 代碼 -->
<script type="text/python">
from browser import html
from browser import document as doc
import math

# 創建一個500x500像素的畫布
canvas = html.CANVAS(width=500, height=500)

# 把畫布加入到頁面的div元素中
brython_div = doc["brython_div1"]
brython_div <= canvas

# 獲取畫布的繪圖上下文
ctx = canvas.getContext("2d")

# 設置畫筆寬度
ctx.lineWidth = 4

# 設置混色模式為 "source-over"（默認模式，無顏色混合）
ctx.globalCompositeOperation = "source-over"

# 設置描邊顏色為黑色
ctx.strokeStyle = 'black'

# 繪製第一個圓形，分為四個顏色
# 第一個圓段 (Turquoise 顏色)
ctx.beginPath()
ctx.arc(160, 160, 141, 0.25 * math.pi, 0.75 * math.pi)
ctx.fillStyle = "Turquoise"
ctx.fill()
ctx.stroke()

# 第二個圓段 (pink 顏色)
ctx.beginPath()
ctx.arc(160, 160, 141, 0.75 * math.pi, 1.25 * math.pi)
ctx.fillStyle = "pink"
ctx.fill()
ctx.stroke()

# 第三個圓段 (Lavender 顏色)
ctx.beginPath()
ctx.arc(160, 160, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = "Lavender"
ctx.fill()
ctx.stroke()

# 第四個圓段 (LightCoral 顏色)
ctx.beginPath()
ctx.arc(160, 160, 141, 1.75 * math.pi, 0.25 * math.pi)
ctx.fillStyle = "LightCoral "
ctx.fill()
ctx.stroke()

# 繪製第二個圓形，這個圓形也分為四個顏色
# 第一個圓段 (BurlyWood 顏色)
ctx.beginPath()
ctx.arc(260, 260, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = "BurlyWood"
ctx.fill()
ctx.stroke()

# 第二個圓段 (LightSkyBlue 顏色)
ctx.beginPath()
ctx.arc(260, 260, 141, 1.75 * math.pi, 0.25 * math.pi)
ctx.fillStyle = "LightSkyBlue"
ctx.fill()
ctx.stroke()

# 第三個圓段 (LavenderBlush 顏色)
ctx.beginPath()
ctx.arc(260, 260, 141, 0.25 * math.pi, 0.75 * math.pi)
ctx.fillStyle = "LavenderBlush"
ctx.fill()
ctx.stroke()

# 第四個圓段 (PeachPuff 顏色)
ctx.beginPath()
ctx.arc(260, 260, 141, 0.75 * math.pi, 1.25 * math.pi)
ctx.fillStyle = "PeachPuff"
ctx.fill()
ctx.stroke()

# 繪製紅色邊框的三角形，並用不同顏色填充
# 第一個三角形 (LightSalmon 顏色)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(60, 60)  # 三角形的起點
ctx.lineTo(60, 260)  # 連接到 (60, 260)
ctx.lineTo(260, 260)  # 連接到 (260, 260)
ctx.fillStyle = "LightSalmon"
ctx.fill()
ctx.stroke()

# 第二個三角形 (Honeydew 顏色)
ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(260, 60)  # 連接到 (260, 60)
ctx.lineTo(260, 260)
ctx.fillStyle = "Honeydew"
ctx.fill()
ctx.stroke()

# 第三個三角形 (LightBlue 顏色)
ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(360, 160)  # 連接到 (360, 160)
ctx.lineTo(360, 360)
ctx.fillStyle = "LightBlue"
ctx.fill()
ctx.stroke()

# 第四個三角形 (PaleGoldenRod 顏色)
ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(160, 360)  # 連接到 (160, 360)
ctx.lineTo(360, 360)
ctx.fillStyle = "PaleGoldenRod"
ctx.fill()
ctx.stroke()

# 繪製兩個重疊的小矩形
# 第一個小矩形 (PaleVioletRed 顏色)
ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(160, 260)  # 連接到 (160, 260)
ctx.lineTo(260, 260)
ctx.fillStyle = "PaleVioletRed"
ctx.fill()
ctx.stroke()

# 第二個小矩形 (PaleGreen 顏色)
ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(260, 160)  # 連接到 (260, 160)
ctx.lineTo(260, 260)
ctx.fillStyle = "PaleGreen"
ctx.fill()
ctx.stroke()

# 繪製藍色的斜線（放在最後繪製）
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(60, 60)  # 斜線起點 (60, 60)
ctx.lineTo(260, 260)  # 斜線終點 (260, 260)
ctx.stroke()
</script>
<p style="top: 646.667px;"><span class="hljs-tag"><img alt="laughing" src="/static/tinymce4/tinymce/plugins/emoticons/img/smiley-laughing.gif"/>原始碼中&lt;<span class="hljs-name">script</span><span> </span><span class="hljs-attr">src</span>=<span class="hljs-string">"./../cmsimde/static/brython.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></p>
<p style="top: 646.667px;"><span class="hljs-tag">&lt;<span class="hljs-name">script</span><span> </span><span class="hljs-attr">src</span>=<span class="hljs-string">"./../cmsimde/static/brython_stdlib.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></p>
<p>這一段的用途?</p>
<p><span class="hljs-tag">&lt;script src="./../cmsimde/static/brython.js"&gt;&lt;/script&gt;:</span></p>
<ul>
<li>這一行加載了 <code>brython.js</code> 文件，這是 Brython 的核心庫，它使得瀏覽器能夠運行 Python 代碼。這段 JavaScript 代碼會將 Python 代碼轉換並執行在瀏覽器中，就像執行 JavaScript 一樣。</li>
<li><code>./../cmsimde/static/</code> 是指向 <code>brython.js</code> 的相對路徑，意味著該文件位於相對於當前 HTML 文件的某個目錄下。</li>
</ul>
<p><span class="hljs-tag">&lt;<span class="hljs-name">script</span><span> </span><span class="hljs-attr">src</span>=<span class="hljs-string">"./../cmsimde/static/brython_stdlib.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;:</span></p>
<ul>
<li>這一行加載了  Brython 的核心庫<strong><span> </span></strong>(<code>brython_stdlib.js</code>)，它包含了一些常見的 Python 標準庫（如 <code>math</code>, <code>random</code>, <code>os</code> 等），使得你可以在瀏覽器中使用這些 Python 模組。</li>
<li>路徑和上面相同，指向的是存放 <code>brython_stdlib.js</code> 的位置。</li>
</ul>
<h3>w14_hw</h3>
<p><span>請根據兩個圓繪圖所圍成的</span><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/0e370b2ad0c429ab4c8905244022c27cfca8cfba/two_cicle_fill_ex1.py">區域</a><span>(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務.</span><span>請根據此老師給得程式架構, 修改為三個圓的區域塗色任務.</span></p>
<p><a href="https://mdecp2024.github.io/hw-HYCCC41323104/content/Brython.html?src=https://gist.githubusercontent.com/HYCCC41323104/e8292567b0a9bd3b42a72fcf6e7ecde9/raw/040cd170b6c7b07b00d98eb07025876b2a31bdfd/w14.1.py">三個圓</a></p>
<p>程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random
import math

# 初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
canvas = html.CANVAS(width=canvas_width, height=canvas_height)
brython_div = doc[id]
brython_div &lt;= canvas
ctx = canvas.getContext("2d")
return canvas, ctx

# 隨機顏色生成器
def random_color_generator():
r = random.randint(0, 255)
g = random.randint(0, 255)
b = random.randint(0, 255)
return f"rgb({r}, {g}, {b})"

# 判斷點是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 繪製三個圓形，並填充交集區域
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
# 初始化畫布，創建並取得畫布和其 2D 上下文
canvas, ctx = initialize_canvas(400, 400)

# 清空畫布
ctx.clearRect(0, 0, canvas.width, canvas.height)

# 顏色區域存儲字典
color_dict = {}

# 使用掃描線方法填充區域，逐行掃描畫布上的每個像素
for py in range(0, canvas.height):
for px in range(0, canvas.width):
in_circle1 = is_point_in_circle(px, py, x1, y1, r1) # 判斷點是否在圓1內
in_circle2 = is_point_in_circle(px, py, x2, y2, r2) # 判斷點是否在圓2內
in_circle3 = is_point_in_circle(px, py, x3, y3, r3) # 判斷點是否在圓3內

# 判斷當前點屬於哪個區域，並選擇相應顏色
if in_circle1 and in_circle2 and in_circle3:
if "all_three" not in color_dict:
color_dict["all_three"] = random_color_generator()
current_color = color_dict["all_three"]
elif in_circle1 and in_circle2:
if "circle1_and_2" not in color_dict:
color_dict["circle1_and_2"] = random_color_generator()
current_color = color_dict["circle1_and_2"]
elif in_circle2 and in_circle3:
if "circle2_and_3" not in color_dict:
color_dict["circle2_and_3"] = random_color_generator()
current_color = color_dict["circle2_and_3"]
elif in_circle1 and in_circle3:
if "circle1_and_3" not in color_dict:
color_dict["circle1_and_3"] = random_color_generator()
current_color = color_dict["circle1_and_3"]
elif in_circle1:
if "circle1" not in color_dict:
color_dict["circle1"] = random_color_generator()
current_color = color_dict["circle1"]
elif in_circle2:
if "circle2" not in color_dict:
color_dict["circle2"] = random_color_generator()
current_color = color_dict["circle2"]
elif in_circle3:
if "circle3" not in color_dict:
color_dict["circle3"] = random_color_generator()
current_color = color_dict["circle3"]
else:
current_color = "white" # 背景顏色設為白色

# 填充當前像素
ctx.fillStyle = current_color
ctx.fillRect(px, py, 1, 1)

# 設定三個圓心和半徑
x1, y1, r1 = 150, 200, 100 # 圓1：圓心 (150, 200)，半徑 100
x2, y2, r2 = 250, 200, 100 # 圓2：圓心 (250, 200)，半徑 100
x3, y3, r3 = 200, 100, 100 # 圓3：圓心 (200, 100)，半徑 100

# 呼叫畫圓函式，並繪製三個圓
draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)</pre>
<p><br/><br/><br/></p>
<h2>w15</h2>
<p>題目一:</p>
<p><a href="https://mdecp2024.github.io/hw-HYCCC41323104/content/Brython.html?src=https://gist.githubusercontent.com/HYCCC41323104/74ac586cfb6c8d2d632989126cf0719f/raw/70dd5b2c7ac86be541797a6deccaf4b32b9a6c18/w15.1.py">從 1 累加到 100</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 初始化總和為 0
total_sum = 0

# 使用 for 迴圈從 1 累加到 100
for i in range(1, 101):
total_sum += i

# 輸出結果
print("從 1 累加到 100 的總和是:", total_sum)</pre>
<p><span style="background-color: #ccffff;">結果為 5050 ~</span></p>
<p><span style="color: #99ccff;">Q:程式中這一段的意思?</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 使用 for 迴圈從 1 累加到 100
for i in range(1, 101):
total_sum += i</pre>
<p><span style="color: #ff99cc;"><span style="color: #99ccff;">A:</span><br/></span></p>
<p>把for i in range(1, 101): 分開介紹</p>
<p><span style="background-color: #ccffff;">for i </span>表示使用一個變數 <span style="background-color: #ccffff;"><code>i</code></span> 來代表每一次循環中的當前數字。</p>
<p><span style="background-color: #ccffff;">in range(1, 101)</span>中的<span style="background-color: #ccffff;"><code>range(1, 101)</code></span> 是一個生成數字的範圍，表示從 1 開始，到 100 結束。這段語法會創建一個數字序列，包含從 1 到 100 的所有整數。<span style="color: #ff0000;">注意，<code>range()</code> 的第二個參數 <code>101</code> 是「不包含」的，所以它不會包括 101 這個數字。</span></p>
<p><span color="#ff0000">冒號則表示開始</span><span color="#ff0000">執行循環體內的程式碼。</span></p><h1>HW 2</h1>
<p><br/>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span> <br/>        Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):PART 2: Introduction to lists and if/else statementsPART 3: Introduction to the for loop完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h3>HW 2 Exam</h3>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 3</h1>
<p>主題: Python 的數字、演算法與迴圈 (20%)</p>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950"><br/>        Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950"></div>
<h3>HW 3 Exam</h3>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950"></div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">每六人為一組進行協同程式練習</div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950"></div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</div>
<h1>HW 4</h1>
<p>主題: 利用 Python 控制機電模擬系統 (20%)<br/>        利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件 <br/>        利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統 <br/>        利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p>        範例:</p>
<p>             <a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p>             <a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h3>HW 4 Exam</h3>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950"></div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">期末口頭專題報告影片:</div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">......</div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950"></div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">期末書面專題報告檔案 (pdf):</div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">......</div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950"></div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">電腦輔助設計與實習課程總結心得:</div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">......</div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950"></div>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">期末報告自評成績:完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
</div>